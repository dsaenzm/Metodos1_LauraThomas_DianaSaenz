# -*- coding: utf-8 -*-
"""Punto8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dO7WryE6cihTVd-S-hpUvwzzrMQphhN3
"""

import numpy as np
import sympy as sym

#Punto 8.a
def Poly(x,xi,yi):    
    Sum = 0.
    n = len(xi)        
    for j in range(n):
        Sum += yi[j]*Lagrange(x,xi,j)        
    return Sum

def Lagrange(x,xi,j):   
    prod = 1.0
    n = len(xi)
    for i in range(n):
        if i != j:
            prod *= (x - xi[i])/(xi[j]-xi[i]) 
    return prod

x = np.array([122,222,322,422]) 
y = np.array([0.001,22,34,4])
h = (x[-1]-x[0])/3
x_space = np.linspace(0,3*h,4)
Y = Poly(x_space,x,y)
xsim= sym.Symbol('x')
f = Poly(xsim,x,y).expand()

Integration_Lagrange_answer = ((3*h)/8)*(f.subs(xsim,x_space[0])+(3*(f.subs(xsim,(2*x_space[0] + \
               x_space[-1])/3)))+(3*(f.subs(xsim,(x_space[0] + 2*x_space[-1])/3)))+\
               f.subs(xsim,x_space[-1])) 
       
Sympy_answer = sym.integrate(f, (xsim,x_space[0],x_space[-1]))

#str(Sympy_answer) es igual a str(Integration_Lagrange_answer). Por lo que su resta da 0
#Con esto se comprueba lo del multiplo de 3

#Punto 8.b
puntointermedio1, puntointermedio2 = (2*x[0] + x[-1])/3, (x[0] + 2*x[-1])/3

#str(np.abs(puntointermedio2-puntointermedio1)) Es la resta entre los puntos intermedios = 100
# El valor de h también es 100
#Su resta también es 0, por lo que se comprueba que están esos puntos para el polinomio